import { HttpStatus, NestInterceptor, Type } from '@nestjs/common';
import { ApiOperationOptions, ApiParamOptions } from '@nestjs/swagger';
import { ParameterObject } from '@nestjs/swagger/dist/interfaces/open-api-spec.interface';
import { SwaggerEnumType } from '@nestjs/swagger/dist/types/swagger-enum.type';

type MakeRequired<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;

export interface CrudOptions
  extends MakeRequired<InitCrudOptions, 'serviceName' | 'routes'> {
  routes: Route[];
}

export interface Route
  extends MakeRequired<
    InitRoute,
    'methodName' | 'httpMethod' | 'decorators' | 'interceptors'
  > {}

/**
 * the initial crud options by the user, i.e before adjusted by mergeOptions()
 * all these options can be customized per route
 */
// todo: add decorators[] that are added to each route.decorators[]
// todo: errorResponse to set error decorators -> @ApiBadRequestResponse({ type: ErrorResponse })
export interface InitCrudOptions {
  /** routes to be generated and added to the Controller class */
  routes?: InitRoute[];
  queryParams?: QueryParam[];
  /** the service name, default: "service" */
  serviceName?: string;
  /** the request model */
  // todo: DTO | Entity
  model?: any;
  /** the success response model, by default the same as model */
  responseModel?: InitCrudOptions['model'];
  /** the general error response model */
  errorResponseModel?: InitCrudOptions['model'];
  /** other response models */
  // todo typeof @ApiResponse()
  responseModels?: Array<{
    status: HttpStatus;
    type: InitCrudOptions['model'];
  }>;
  /** the primary key field name, default: "id" */
  primaryKey?: string;
  /** the maximum records count to be fetched */
  maxLimit?: number;
  /** decorators to be added to each route
   * to apply decorators to the controller itself, just annotate them to the controller directly
   */
  decorators?: (MethodDecorator | PropertyDecorator)[];
  interceptors?: (NestInterceptor | Function)[];
  /**
   * the default query{}, merged with each route's query object
   *
   * this applies to both the routes thar are generated by \@Crud()
   * or the existing routes.
   * @example
   * ```
   * @Get()
   * getMany(@Query() query){}
   * ```
   * query here is merged with opts.query
   */
  // todo: FindOneOptions | FindManyOptions ...
  query?: { [key: string]: any };
}

/**
 * the initial Route,
 * also accepts `ApiOperationOptions` and `InitCrudOptions` to override its props for each route
 */

export interface InitRoute
  extends ApiOperationOptions,
    Omit<InitCrudOptions, 'routes'> {
  /** the http method, default: GET */
  httpMethod?: HttpMethod /*| RequestMethod*/;
  /** default path is "/" or ":id" */
  path?: string;
  /**
   * the name of the generated method, by default it is ${httpMethod}${Many|One}
   * it must be unique within the Controller class to avoid overriding each other
   * @example getMany, deleteOne
   */
  methodName?: string;
  /**
   * whether it get many or one result, to set the proper metadata
   */
  many?: boolean;
  /**
   * the method body
   * by default it is generated based on the route's info,
   * and it calls the corresponding Service's method
   * @example `(req)=>this.service.getMany(req)`
   */
  methodFactory?: () => any;
  /** Swagger summary for this route */
  description?: string;
  pathParams?: ApiParamOptions[];
  /** if disabled, the route method will not be created */
  disabled?: boolean;
}

// todo: extends ApiQueryMetadata from @nestjs/swagger (not exported)
export interface QueryParam extends ParameterOptions {
  name?: string;
  // eslint-disable-next-line @typescript-eslint/ban-types
  type?: Type<unknown> | Function | [Function] | string;
  isArray?: boolean;
  enum?: SwaggerEnumType;
  enumName?: string;
  /**
   * if this query param should be added only to routes that has many=true
   * i.e operations that returns multiple records
   * such as getMany()
   */
  many?: boolean;
  /**
   * to add the query only to specific http methods
   */
  httpMethods?: HttpMethod[];
}
type ParameterOptions = Omit<ParameterObject, 'in' | 'name'>;

// todo: replace with `RequestMethod` Enum from @nestjs/common
export type HttpMethod =
  | 'GET'
  | 'POST'
  | 'PUT'
  | 'DELETE'
  | 'PATCH'
  | 'HEAD'
  | 'OPTIONS';
